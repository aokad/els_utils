#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
Created on Wed Mar 14 11:53:04 2018

@author: Okada
"""

import sys
import argparse
import elsu.kibana
from elsu import __version__

def main():
    prog = "elsu-kibana"
    parser = argparse.ArgumentParser(prog = prog)
    parser.add_argument("--version", action = "version", version = prog + "-" + __version__)
    subparsers = parser.add_subparsers()
    
    ##########
    # post
    post_parser = subparsers.add_parser("post", help = "post json-file or create index-pattern")
    post_parser.add_argument("type", choices = ["dashboard", "visualization", "index-pattern"], help = "type")
    post_parser.add_argument("--index", help = "set index-id, with type == index-pattern", type = str, default = "")
    post_parser.add_argument("--file", help = "set file_path (.json), with type == dashboard/visualization", type = str, default = "")
    post_parser.add_argument("--debug", help = "show detail log", action = 'store_true')
    post_parser.add_argument("--dryrun", help = "print commands", action = 'store_true')
    post_parser.add_argument("--conf", help = "path to conf.yml", type = str, default = "conf.yml")
    post_parser.set_defaults(func = elsu.kibana.post_if)

    ##########
    # get
    get_parser = subparsers.add_parser("get", help = "view object")
    get_parser.add_argument("type", choices = ["dashboard", "visualization", "index-pattern", "all", "challenge"], help = "type")
    get_parser.add_argument("--id", help = "set object-id, with type == dashboard/visualization/index-pattern", type = str, default = "")
    get_parser.add_argument("--title", help = "set object-title, with type == dashboard/visualization/index-pattern", type = str, default = "")
    get_parser.add_argument("--max", help = "Maximum acquisition number", type = int, default = 100)
    get_parser.add_argument("--debug", help = "show detail log", action = 'store_true')
    get_parser.add_argument("--conf", help = "path to conf.yml", type = str, default = "conf.yml")
    get_parser.set_defaults(func = elsu.kibana.get_if)
    
    ##########
    # delete
    delete_parser = subparsers.add_parser("delete", help = "delete object")
    delete_parser.add_argument("type", choices = ["dashboard", "visualization", "index-pattern", "all", "challenge"], help = "type")
    delete_parser.add_argument("--challenge_id", help = "set challenge-id, with type == challenge", type = str, default = "")
    delete_parser.add_argument("--id", help = "set object-id, with type == dashboard/visualization/index-pattern", type = str, default = "")
    delete_parser.add_argument("--title", help = "set object-title, with type == dashboard/visualization/index-pattern", type = str, default = "")
    delete_parser.add_argument("--debug", help = "show detail log", action = 'store_true')
    delete_parser.add_argument("--dryrun", help = "print commands", action = 'store_true')
    delete_parser.add_argument("--conf", help = "path to conf.yml", type = str, default = "conf.yml")
    delete_parser.set_defaults(func = elsu.kibana.delete_if)

    
    argv = sys.argv[1:]
    if len(argv) < 1:
        argv = [""]
        
    (known_args, unknown_args) = parser.parse_known_args(argv)
    if len(unknown_args) > 0:
        if '' in unknown_args:
            unknown_args.remove('')
        if len(unknown_args) > 0:
            print ("This option is invalid.")
            print (unknown_args)
    
    return known_args.func(known_args)
    
if __name__ == "__main__":
    if main():
        sys.exit(0)
    sys.exit(1)
